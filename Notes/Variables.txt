Variables:

    1-Integer Numbers:
        - We can add "_" to divide numbers, in order to make it more readable ( NOT in the beginning or end )
            1000 = 1_000  1000000 = 1_000_000
        - unsigned integers – integers that can contain only non-negative values.
            UByte	an unsigned 8-bit integer, ranges from 0 to 255
            UShort	an unsigned 16-bit integer, ranges from 0 to 65535
            UInt	an unsigned 32-bit integer, ranges from 0 to 4 294 967 295 (2^32-1)
            ULong	an unsigned 64-bit integer, ranges from 0 to 18 446 744 073 709 551 615 (2^64-1)

    2 - Characters:
        - Can represent a digit, letter or symbol ( also white spaces )
        - Character representing number '9', actual number 9
        - Cannot represent two or more characters, only one
    3 - Strings:
        - Represent text informations
        - Use double quotes to write "HUGO"
        - Can include everything

        - Length: number of characters that are enclosed between ""
            val language = "Kotlin"
            println(language.length) // 6

        - Concatenation: Contruct one string out of another
            val str1 = "ab"
            val str2 = "cde"
            val result = str1 + str2 // "abcde"

        - Appending: "+" also works to append values ( but must start with string or character with string)
            val stringPlusBoolean = "abc" + 10 + true
            println(stringPlusBoolean) // abc10true

        - Repeating:
            print("Hello".repeat(4)) // HelloHelloHelloHello

        - Raw: can contain newlines and any other characters. You just need to wrap the text in triple quotes ("""):
            val largeString = """
                This is the house that Jack built.

                This is the malt that lay in the house that Jack built.

                This is the rat that ate the malt
                That lay in the house that Jack built.

                This is the cat
                That killed the rat that ate the malt
                That lay in the house that Jack built.
            """.trimIndent() // removes the first and the last lines and trim indents
            print(largeString)

        - STRING TEMPLATES ($<vaiable>in the string)
            - Put values of variables in a text
                val city = "Paris"
                val temp = "24"

                println("Now, the temperature in $city is $temp degrees Celsius.")
            - Can also work for expressions
                val language = "Kotlin"
                println("$language has ${language.length} letters in the name")

    4 - Booleans
        - toBoolean() returns true if the input is "true", case insensitive. If otherwise, it will return false.
            val b: Boolean = readln().toBoolean()
        -

    Conclusion:
        - 123 != "123"
        - 'A' is a character and "A" is a string
        - '1' is a character and 1 is an integer

    Declaring Variables:
        - val -> (Used for values) -> Immutable variable that cannot ( almost all the time ) be changed after
            - User cannot reassine it but can change the internal state of the object
                - Add another value ( with the same type ) on a val list for example
				- When you change the first box, its copy changes, too. This is because 
					blueBoxand azureBoxpoint to the same object
						val blueBox = Box(3)          // box with 3 balls
						val azureBox = blueBox 
						println(blueBox == azureBox ) // true, it's a copy
						blueBox.addBall()             // add a ball to the first box
						println(blueBox == azureBox ) // true, the second box also contains 4 balls
				- Kotlin provides a special operator === !== to check if the variables point to the same object. 
					And avoid this... it will only happens when pointing to the same objective
			- The val keyword implies an immutable reference to the object. You can change something inside, 
				but you cannot reassign it to another value.
				
        - var -> (for variables)   -> This one can change as many times the user wants
			- The var keyword implies a mutable reference to a variable, so you can reassign it.

        - CANNOT START WITH DIGITS
        - User can initialise a variable with the variable of another variable
            val cost = 3
            val costOfCoffee = cost
            println(costOfCoffee) // prints 3
        - for mutable variables (VAR) -> User can only reassign values of the same type
            - INT INT
            - STRING STRING
        - Better to use immutable variables (VAL)
        - Use VAL values by default and, when necessary, go to VAR ( but only whennecessary )
            - Se recebe algum tipo de argumento... não pode usar val

        - The variable type is set when the variable is set, cannot mechanged latter
            - type inference
        - You can also specify the type of a variable when declaring it:
            val/var identifier: <Type> = initialization

    CONST Values
        - Needs to be used with the corresponding value, cannot be assigned later
        - Can only be used with string or primitive type variables ( string, integer, floas, character or array )
        - needs to be declared on top level ( outside main())