Syntax

    1 Syntax from a hello world

        fun main() {
            println("Hello, World!")
        }

        - // Comments
        - "fun" -> Entry point
            - This function has a special name main() and a body enclosed in braces {...}
        - println("") -> Prints a string to the console output
        - Needs new lines for each statements, withou "," or ";"

    2 - Output
        - println() -> Display a string followed by a new line
        - print()   -> Display a string and put the cursor after

        - Can print also numbers and characters

    3 - Standard Input
        - It reads the whole line as a string:
            val line = readLine()!!
            val number = readLine()!!.toInt() = var number = readln().toInt()
        - Shortcomings
            - Read several values from the same line ( one by one ) by a delimiter
                - val (c, d, e) = readLine()!!.split(' ') // can read, for example "Go for it"

                print("Enter cells:")
                    val scanner = readln().toCharArray()

        - READLN()
            - Reads the whole line as a string
            - returns a string
            - Reading multiple values in one line
                val (a, b) = readln().split(" ")
                println(a)
                println(b)
            -

        - Java Scanner
            - Needsdeclaration
                import java.util.Scanner or import java.util.*

            - Let's create a variable initialized by Scanner:
              val scanner = Scanner(System.`in`)

              -Functions wecan use
                val line = scanner.nextLine() // read a whole line, i.e. "Hello, Kotlin"
                val num = scanner.nextInt()   // read a number, i.e. 123
                val string = scanner.next()   // read a string, i.e. "Hello"

    4- Logical operators
        - !   -> NOT - Reverses the boolean value
        - &&  -> AND - Returns true if bot operands are true
        - ||  -> OR  - Returns true if at least one operand is true
        - XOR -> XOR - Returns true if the operands have different values

    5 - Arithmetic operations
        - addition +
        - subtraction -
        - multiplication *
        - integer division / -> perator divides the integer parts of two numbers; the fractional part is discarded
        - modulus % -> The % operator finds the remainder of a division:

        println(11 / -4)   // prints -2
        println(11 % -4)   // prints 3

        - Compound assignment operators can be applied only to a variable that is already defined and cannot
         be used to declare a new variable:
            += assignment after addition: A += B equals A = A + B
            -= assignment after subtraction: A -= B equals A = A - B
            *= assignment after multiplication: A *= B equals A = A * B
            /= assignment after division: A /= B equals A = A / B
            %= assignment of the remainder after division: A %= B equals A = A % B

        - Prefix form changes the value of a variable before it is used (++a)
        - Postfix form changes the value of a variable after it is used (a++)
            var num = 3
            num++  // 4, increment
            num--  // 3, decrement


    6 - List of relational operators

        == — equal to X
        != — not equal to X
        > — greater than X
        >= — greater than or equal to X
        < — less than X
        <= — less than or equal to X

        - You can compare Int and Long freely with >, <. >=, <=, but cannot use == and !=.
            You can check equality only for the same types, so you need to convert Int to Long

    7- Conditional expression
            if (expression0) {
                // do something
            } else if (expression1) {
                // do something else 1
            // ...
            } else if (expressionN) {
                // do something else N
            }
        - it can return a value (result) of computations, assigns a value to a variable using if
            The result must be the last expression in a body.
        - If you are going to use the if as an expression, it must have an else branch.
               val max = if (a > b) {
                   println("Choose a")
                   a
               } else {
                   println("Choose b")
                   b
               }
        -  If all the bodies contain only a single statement, you can skip braces:

               val max = if (a > b) a else b
         - using if as an expression is a better way. For example:

               val max = if (a > b) a else b // one line

               ...

               var max = a // try to avoid var if possible
               if (b > a) max = b

	8- Repeat Statments
		- Repeat loop
			- Simple loop (n) times, repeats what is inside the braces. The user can control the iteration with "it"
				Same as * in forms
			
				repeat(n) {
					// statements
				}
				
	9 - Objects
		- Every variable is an object
		- Can store some data and do something
		- Part of memory that stores some sort of information
		- Something that allows you to access the state of an object is called a property
			- Using "."
				msg: val msg = "Hi". There is a .length property in a string, so msg.length gives us 2.
		- Some functons are also bound to a specific type : msg.repeade(3) for example "hihihi"
		- If you create a variable and assign an object to it, another variable can point to the same object as well
			val msg1 = "Hi"
			val msg2 = msg1
			There will be two values pointing to a single object "Hi":
		
	10 - Ranges
		- (val within = a <= c && c <= b) is the same as (val within = c in a..b)
		- The key keyword will include every number on the range (a..b) including a and be
			- Can be excluded typing -1 after the variable b for example
		- User can also combineranges using logical operators || and &&
		- User can also assign the range to a variable (val) imutable
		- also works for characters and strings

	11 - FOR loop
		- can iterate through ranges, arrays, and other collections
			for (element in source) {
				// body of loop
			}
		- an elemento to be used inside the loop to represent each itaration at a times
		- source is everything tha has more than one value in a row ( ranges, strings, arrays... )
		- can be done in reverse, using downTo
			for (i in 4 downTo 1) {
				println(i)
			}
		- Using intill it will exclude the upper limit ( put it instead of "downTo" )
		- step is always present, but default one, to change taht we just need to type ( will work for every option )
			for (i in 1..7 step 2) {
				println(i)
			}
		
		for (i in 1..6) { ... }        // closed range: 1, 2, 3, 4, 5, 6
		for (i in 1 until 6) { ... }   // half-open range: 1, 2, 3, 4, 5
		for (x in 1..6 step 2) { ... } // step 2: 1, 3, 5
		for (x in 6 downTo 1) { ... }  // closed range, backward order: 6, 5, 4, 3, 2, 1 
		
	12 - MUTABLELIST
		- MutableList is an ordered list of variables of the same type. 
			You can access the list items by their indexes.
			
			val numbers = mutableListOf<Double>(10.8, 14.3, 13.5, 12.1, 9.7) 
			println(numbers) // [10.8, 14.3, 13.5, 12.1, 9.7]
		
		- Inex starts with 0
		- can handle Int, Long, Double, Float, Char, String, Byte, or Boolean.
		- Create a multableList of an specific size "MutableList(n)"
		- if we pass something on the braces, kotlin will repet it over N times
			"a = MutableList(n) {"a"}" = {"a","a"....}
		- There are also some properties "a.size" for example
		- Read a mutable list from input
			val mi,bers = MutableList(N) { readln().toInt() }
		- Or get a string and split it
			var numbers = readln().split(" ").map { it.toInt() }.toMutableList()
		- User can get or set elements by index numbers[2] for example
		- [0 ~ numbers.size-1]
		- .first() and .last() also works to acces the first and the last element
		
		- "joinToString(<separator>)" -> Helps to output a list in different ways, unsing a separator
		- Concatenate multiple lists using +
			 val newList = southernCross + stars
		- can use "==" or "!=" to compare lists
			- only return true if the elements are the same and in the same order
		- Even with val user can change the content of a list referencing by it's indexis
			- IT doesn't change the link, just the content (that is why it is possible)
			- "val star = mutableListOf("aa", "bb")
			- "start[1] = cc" -> outputis "cc"
		- Comands
			- ".removeAt(<INDEX>)" -> Remove the element on the index
			- ".remove(<CONTENT>" -> Remove enery ocorrency of the content
			- ".add(<ELEMENT>)" -> Add a new element to the end of the list
			- ".add(<INDEX>, <ELEMENT>)" -> Add a new element in the defined index
			- ".addAll(<Another lsit>)" -> Add all elements from a second lins at the end of the first one
			- ".clear()" -> Deletes all elements of the list
			- "+=" can alsoo add elements to the list
			- ".isEmpty() / isNotEmpty()" -> Verift if the list is empty or not
			- ".subList(from, to)" -> Creates a smaller list including the from iondex until to-1.
				- index to is not included
			- "<ELEMENT> in list" -> Check if the element is on the list
			- ".indexOf(<ELEMENT>)" -> Returns the element index
			- "..minOrNull() / .maxOrNull()" -> Search for the min and max elements of the list
			- ".sum()" -> returns  the sim of the elements
			- ".stored()/ .storedDescending()" -> build a sortedlist from the available list
			- 
		- way to copy lists
			val list = mutableListOf(1, 2, 3, 4, 5)
			val copyList = list.toMutableList()

			print(copyList) // [1, 2, 3, 4, 5]
		- Loop through the list	
			- for (element in LIST){}
				Itwill loop to all elements of the list
			- for (index in daysOfWeek.indices) {println("$index: ${daysOfWeek[index]}"}
				it will oop trhough every index of the lsit
			- for (index in 1..5)
				- the index is defined in a agregate order 1..5 for example
				- usando o "downTo" no luagr do .. da para decrementar os indexis
			- Read Mutable list from input
				    val size = readln().toInt()
					val mutList: MutableList<Int> = mutableListOf()
					for (i in 0 until size) {
						mutList.add(readln().toInt())
					}
			- 
		
		
		
		
		